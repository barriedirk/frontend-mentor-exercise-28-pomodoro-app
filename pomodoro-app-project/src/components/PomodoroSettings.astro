---
import { base } from "../utils/base.js";
---

<section class="pomodoro-settings glass">
  <button
    id="btnPomodoroSettings"
    class="pomodoro-settings__button"
    type="button"
    aria-label="Settings"
  >
    <svg class="settings w-[28px] h-[28px]" aria-hidden="true">
      <use href={`${base}assets/icon-settings.svg#settings`}></use>
    </svg>
  </button>
</section>
<dialog
  id="modal-dialog"
  aria-modal="true"
  role="dialog"
  class="modal-dialog settings-dialog relative"
  aria-labelledby="form-settings-dialog-title"
  aria-describedby="form-settings-dialog-desc"
>
  <div
    class="form-settings__header flex flex-row justify-between items-center p-6"
  >
    <h2
      id="form-settings-dialog-title"
      class="text-preset-1--settings blue-900"
    >
      Settings
    </h2>
    <p id="form-settings-dialog-desc" class="sr-only">
      Customize your pomodoro preferences
    </p>
    <button
      id="btnCloseDialog"
      class="form-settings__close"
      aria-label="Close settings dialog"
    >
      <img src={`${base}assets/icon-close.svg`} alt="" role="presentation" />
    </button>
  </div>

  <form id="form-settings" class="form-settings p-6">
    <fieldset class="form-settings--time">
      <legend class="sr-only">Time Section</legend>
      <h3 class="form-settings__legend blue-900">TIME (MINUTES)</h3>
      <div class="form-settings__timer">
        <div class="fs__group">
          <label
            class="fs__label grey-400 text-preset-4--settings"
            for="time_pomodoro">pomodoro</label
          >
          <div class="fs__input-wrapper bg-blue-50 p-4">
            <input
              id="time_pomodoro"
              name="timePomodoro"
              class="fs__input text-preset-3--settings"
              value="0"
              type="number"
              min="1"
              max="999"
              inputmode="numeric"
            />
          </div>
        </div>
        <div class="fs__group">
          <label
            class="fs__label grey-400 text-preset-4--settings"
            for="time_short_break">short break</label
          >
          <div class="fs__input-wrapper bg-blue-50 p-4">
            <input
              id="time_short_break"
              name="timeShortBreak"
              class="fs__input text-preset-3--settings"
              value="0"
              type="number"
              min="1"
              max="999"
              inputmode="numeric"
            />
          </div>
        </div>
        <div class="fs__group">
          <label
            class="fs__label grey-400 text-preset-4--settings"
            for="time_long_break">long break</label
          >
          <div class="fs__input-wrapper bg-blue-50 p-4">
            <input
              id="time_long_break"
              name="timeLongBreak"
              class="fs__input text-preset-3--settings"
              value="0"
              type="number"
              min="1"
              max="999"
              inputmode="numeric"
            />
          </div>
        </div>
      </div>
    </fieldset>
    <hr />
    <fieldset class="form-settings--font">
      <legend class="sr-only">FONT</legend>
      <h3 class="form-settings__legend blue-900">FONT</h3>
      <div class="form-settings__font">
        <div class="fs__group">
          <input
            id="fs__font--Kumbh-Sans"
            type="radio"
            name="font"
            value="--ff-kumbh"
          />
          <label
            for="fs__font--Kumbh-Sans"
            class="fs__label--font text-preset-2--settings--font-1 absolute-center bg-blue-50"
            tabindex="0">Aa</label
          >
        </div>
        <div class="fs__group">
          <input
            id="fs__font--Roboto-Slab"
            type="radio"
            name="font"
            value="--ff-roboto"
          />
          <label
            for="fs__font--Roboto-Slab"
            class="fs__label--font text-preset-2--settings--font-2 absolute-center bg-blue-50"
            tabindex="0">Aa</label
          >
        </div>
        <div class="fs__group">
          <input
            id="fs__font--Space-Mono"
            type="radio"
            name="font"
            value="--ff-space"
          />
          <label
            for="fs__font--Space-Mono"
            class="fs__label--font text-preset-2--settings--font-3 absolute-center bg-blue-50"
            tabindex="0">Aa</label
          >
        </div>
      </div>
    </fieldset>
    <hr />
    <fieldset class="mb-2.5 form-settings--color">
      <legend class="sr-only">COLOR</legend>
      <h3 class="form-settings__legend blue-900">COLOR</h3>
      <div class="form-settings__color">
        <div class="fs__group">
          <input
            id="fs__color--red-400"
            type="radio"
            name="color"
            value="--clr-red-400"
          />
          <label
            for="fs__color--red-400"
            class="fs__label--color bg-red-400 absolute-center"
            tabindex="0"
          >
            <span class="sr-only">color red-400</span>
            <img
              src={`${base}assets/icon-checkmark.svg`}
              alt=""
              role="presentation"
            />
          </label>
        </div>
        <div class="fs__group">
          <input
            id="fs__color--cyan-300"
            type="radio"
            name="color"
            value="--clr-cyan-300"
          />
          <label
            for="fs__color--cyan-300"
            class="fs__label--color bg-cyan-300 absolute-center"
            tabindex="0"
          >
            <span class="sr-only">color cyan-300</span>
            <img
              src={`${base}assets/icon-checkmark.svg`}
              alt=""
              role="presentation"
            />
          </label>
        </div>
        <div class="fs__group">
          <input
            id="fs__color--purple-400"
            type="radio"
            name="color"
            value="--clr-purple-400"
          />
          <label
            for="fs__color--purple-400"
            class="fs__label--color bg-purple-400 absolute-center"
            tabindex="0"
          >
            <span class="sr-only">color purple-400</span>
            <img
              src={`${base}assets/icon-checkmark.svg`}
              alt=""
              role="presentation"
            />
          </label>
        </div>
      </div>
    </fieldset>
    <button
      id="fs__submit"
      type="submit"
      class="fs__submit bg-red-400 white py-3 px-8 rounded-3xl absolute -translate-x-1/2"
      >Apply</button
    >
  </form>
</dialog>

<style>
  .fs__submit {
    font-family: var(--ff-kumbh);
    font-weight: var(--fw-bold);
    font-size: var(--fs-16);
    line-height: var(--lh-125);
  }

  .form-settings {
    max-width: 100%;
  }

  .form-settings input[type="number"] {
    outline: none;
  }

  .form-settings hr {
    height: 1px;
    color: var(--clr-grey-200);
    background: var(--clr-grey-200);
    margin-block: 20px;
  }

  .form-settings__timer {
    width: 100%;
  }

  .form-settings input[type="radio"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .form-settings__color .fs__group,
  .form-settings__font .fs__group {
    flex: 0 0 0%;
  }

  .form-settings__color,
  .form-settings__font {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 16px;
  }

  .form-settings__color label,
  .form-settings__font label {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    transition: background-color 0.3s ease-in-out;
  }

  .form-settings__color img {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .form-settings__color input[type="radio"]:checked + label img {
    opacity: 1;
  }

  .form-settings__font input[type="radio"]:checked + label {
    background-color: var(--clr-blue-950);
    color: var(--clr-white);
  }

  .form-settings__header {
    border-bottom: 1px solid var(--clr-grey-200);
  }

  .fs__group {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-block: 1rem;
    width: 100%;
    gap: 1rem;
  }

  .fs__label {
    text-align: left;
  }

  .fs__input-wrapper,
  .fs__label {
    display: flex;
    flex: 1;
    min-width: 0;
    line-height: 1;
  }

  .fs__input-wrapper {
    border-radius: 10px;
  }

  .fs__input {
    width: 100%;
    line-height: 1;
  }

  .settings-dialog {
    width: 100%;
    max-width: 375px;
    transition: width 1s ease-in-out;
  }

  .form-settings__legend {
    font-family: var(--ff-kumbh);
    font-size: var(--fs-11);
    font-weight: var(--fw-bold);
    letter-spacing: 0.264375rem;
    margin: 0 auto 20px auto;
  }

  .settings {
    transition: transform 0.5s ease;
  }

  .settings.rotating {
    transform: rotate(90deg);
    transition: transform 0.4s ease;
  }

  .pomodoro-settings__button:hover .settings {
    transform: rotate(90deg);
  }

  @keyframes jelly {
    0% {
      transform: scale(1);
    }
    30% {
      transform: scale(1.2, 0.8);
    }
    50% {
      transform: scale(0.9, 1.1);
    }
    70% {
      transform: scale(1.05, 0.95);
    }
    100% {
      transform: scale(1);
    }
  }

  .settings.jelly {
    animation: jelly 0.5s ease-in-out;
  }

  @media screen and (min-width: 34em) {
    .settings-dialog {
      max-width: 540px;
    }

    .form-settings__legend {
      text-align: left;
      margin: 0;
    }

    .form-settings__timer {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 20px;
    }

    .form-settings__timer .fs__group {
      flex-direction: column;
      align-items: self-start;
      gap: 0.5rem;
    }

    .form-settings--font,
    .form-settings--color {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }

    .form-settings__legend {
    }
  }
</style>

<script>
  type ApplySettingsActionParams = {
    timePomodoro: any;
    timeShortBreak: any;
    timeLongBreak: any;
    font: any;
    color: any;
    letterSpacing: any;
  };

  import {
    applySettings,
    addListener,
    getState,
    resetTimer,
  } from "../scripts/PomodoroStore.js";
  import {
    setInputValue,
    setAccesibilityRadio,
    onlyInputNumberAllowed,
  } from "../lib/utils/utils.js";

  (async () => {
    const btnOpenDialog = document.getElementById("btnPomodoroSettings");
    const icon = btnOpenDialog!.querySelector(".settings");
    const btnCloseDialog = document.getElementById("btnCloseDialog");
    const modalDialog = document.getElementById("modal-dialog") as any;
    const btnApplyChanges = document.getElementById("fs__submit");

    const { timePomodoro, timeShortBreak, timeLongBreak, font, color } =
      getState();

    const listener = async (store: any) => {
      const { font, color, letterSpacing } = store.getState();

      document.body.style.setProperty("--clr-pomodoro", `var(${color})`);
      document.body.style.setProperty("--ff-pomodoro", `var(${font})`);
      document.body.style.setProperty("--ls-pomodoro", `var(${letterSpacing})`);
    };

    addListener(listener);

    const setFormValues = () => {
      const { timePomodoro, timeShortBreak, timeLongBreak, font, color } =
        getState();

      setInputValue(
        ".form-settings input[name='timePomodoro']",
        "value",
        timePomodoro
      );

      setInputValue(
        ".form-settings input[name='timeLongBreak']",
        "value",
        timeLongBreak
      );

      setInputValue(
        ".form-settings input[name='timeShortBreak']",
        "value",
        timeShortBreak
      );

      setInputValue(
        `.form-settings input[name="font"][value="${font}"]`,
        "checked",
        true
      );

      setInputValue(
        `.form-settings input[name="color"][value="${color}"]`,
        "checked",
        true
      );
    };

    setAccesibilityRadio(
      '.form-settings__color input[type="radio"], .form-settings__font input[type="radio"]',
      ".form-settings__color .fs__group label, .form-settings__font .fs__group label"
    );

    onlyInputNumberAllowed('#form-settings input[type="number"]');

    btnApplyChanges!.addEventListener("click", (evt) => {
      evt.preventDefault();

      const form = document.getElementById("form-settings")!;
      const formData = new FormData(form as any);

      const timePomodoro = formData.get("timePomodoro");
      const timeShortBreak = formData.get("timeShortBreak");
      const timeLongBreak = formData.get("timeLongBreak");
      const color = formData.get("color");
      const font = formData.get("font");

      const values = [timePomodoro, timeShortBreak, timeLongBreak].map((val) =>
        Number(val)
      );

      const hasInvalid = values.some((val) => !val || isNaN(val) || val < 1);

      if (hasInvalid) {
        alert("Please enter a valid number (1 or more) for all time settings.");

        return;
      }

      if (!font || !color) {
        alert("Please enter a valid font and/or color for all time settings.");

        return;
      }

      let output: Record<string, any> = {};

      for (const [key, value] of formData) {
        output[key] = value;
      }

      output.letterSpacing =
        output.font === "--ff-space" ? "--ls--10" : "--ls-0";

      applySettings(output as ApplySettingsActionParams);
      resetTimer();

      modalDialog!.close();
    });

    let lastFocusedElement: HTMLElement | null = null;

    btnOpenDialog!.addEventListener("click", (evt) => {
      evt.preventDefault();

      setFormValues();

      lastFocusedElement = document.activeElement as HTMLElement;

      modalDialog.showModal();

      const focusable = modalDialog.querySelector(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      ) as HTMLElement;
      focusable?.focus();
    });

    btnCloseDialog!.addEventListener("click", (evt) => {
      evt.preventDefault();

      modalDialog.close();

      lastFocusedElement?.focus();
    });

    modalDialog.addEventListener("keydown", (evt: KeyboardEvent) => {
      if (evt.key === "Escape") {
        evt.preventDefault();

        modalDialog.close();
        lastFocusedElement?.focus();
      }
    });

    let touched = false;

    btnOpenDialog!.addEventListener("touchstart", () => {
      if (!touched) {
        icon!.classList.add("rotating", "jelly");
        setTimeout(() => {
          icon!.classList.remove("rotating", "jelly");
        }, 500);
        touched = true;
        setTimeout(() => (touched = false), 600);
      }
    });

    btnOpenDialog!.addEventListener("mouseenter", () => {
      icon!.classList.add("jelly");
      setTimeout(() => icon!.classList.remove("jelly"), 500);
    });
  })();
</script>
