---

---

<section class="pomodoro-timer w-full">
  <div
    class="pomodoro-progress-outer flex flex-col justify-center items-center"
  >
    <div
      class="pomodoro-progress-middle flex flex-col justify-center items-center"
    >
      <div
        class="pomodoro-progress-inner flex flex-col justify-center items-center"
      >
        <div
          id="pomodoro-progress"
          class="pomodoro-progress flex flex-col justify-center items-center"
          style="--progress: 0;"
        >
          <div class="progress-dot"></div>
          <div
            class="pomodoro-display--container flex flex-col justify-center items-center gap-4"
          >
            <span
              id="pomodoro-display"
              class="pomodoro-display text-preset-1--mobile--font-3 blue-100"
              >00:00</span
            >
            <div class="flex flex-row gap-2">
              <button
                type="button"
                id="btn-timer"
                class="pomodoro-timer-btn text-preset-2--mobile--font-3 uppercase"
                aria-pressed="false">Start</button
              >
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import {
    updateMode,
    getState,
    updateTimer,
    startTimer,
    stopTimer,
    addListener,
  } from "../scripts/PomodoroStore.js";
  import { POMODORO_VALUES, POMODORO_MODE } from "../lib/utils/constants.js";

  (async () => {
    let { pomodoroMode, timeRemaining, totalDuration, isRunning } = getState();

    console.log("INITIAL", {
      pomodoroMode,
      timeRemaining,
      totalDuration,
      isRunning,
    });

    const getMinutes = (mode: string) => {
      const property: string = POMODORO_MODE[mode].time as string;

      console.log("getMinutes", Number(getState()[property]));

      return property ? Number(getState()[property]) : -1;
    };

    // const progressDot = document.querySelector(".progress-dot");
    //
    // function updateProgress(percent: number, remainingSeconds: number) {
    //   progressEl.style.setProperty("--progress", percent.toFixed(2));
    //
    //   const angle = (percent / 100) * 360;
    //   progressDot.style.transform = `translate(-50%, -100%) rotate(${angle}deg) translateY(calc(var(--size) / 2 - var(--thickness) / 2))`;
    //
    //   const minutes = Math.floor(remainingSeconds / 60);
    //   const seconds = remainingSeconds % 60;
    //   timeDisplay.textContent = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
    // }

    const btnTimer: HTMLElement = document.querySelector(
      ".pomodoro-timer-btn"
    )!;
    const timerEl: HTMLElement = document.querySelector(".pomodoro-timer")!;
    const progressEl: HTMLElement =
      timerEl.querySelector(".pomodoro-progress")!;
    const timeDisplay: HTMLElement =
      timerEl.querySelector(".pomodoro-display")!;

    let interval: ReturnType<typeof setInterval>;

    const pauseTimerFn = (clear = false) => {
      btnTimer.setAttribute("aria-pressed", "false");
      btnTimer.innerText = "Pause";

      clear && clearInterval(interval);
    };

    const resumeTimerFn = (clear = false) => {
      btnTimer.setAttribute("aria-pressed", "false");
      btnTimer.innerText = "Resume";

      clear && clearInterval(interval);
    };

    const resetTimerFn = (clear = false) => {
      btnTimer.setAttribute("aria-pressed", "false");
      btnTimer.innerText = "Start";

      clear && clearInterval(interval);
    };

    const startTimerFn = (startInterval = false) => {
      btnTimer.setAttribute("aria-pressed", "true");
      btnTimer.innerText = "Pause";

      startInterval && (interval = start());
    };

    const updateTimeDisplay = (
      timeRemaining: number,
      totalDuration: number
    ) => {
      const percent = ((totalDuration - timeRemaining) / totalDuration) * 100;
      const minutes = Math.floor(timeRemaining / 60);
      const seconds = timeRemaining % 60;

      console.log("updateTimeDisplay", {
        timeRemaining,
        totalDuration,
        percent,
        minutes,
        seconds,
      });

      timeDisplay.textContent =
        timeRemaining <= 0
          ? "00:00"
          : `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

      if (progressEl) {
        progressEl.style!.setProperty("--progress", percent.toFixed(2));
      }
    };

    const listener = async (store: any) => {
      let {
        pomodoroMode: currentPomodoro,
        isPressed,
        timeRemaining,
        totalDuration,
        isRunning,
      } = store.getState();

      if (pomodoroMode !== currentPomodoro) {
        totalDuration = getMinutes(pomodoroMode) * 60;
        timeRemaining = totalDuration;
        isPressed = false;
        isRunning = false;
        interval && clearInterval(interval);

        pomodoroMode = currentPomodoro;

        updateTimeDisplay(timeRemaining, totalDuration);

        updateTimer({
          totalDuration,
          timeRemaining,
          isRunning,
        });
      }
    };

    addListener(listener);

    btnTimer.setAttribute("aria-pressed", "false");

    if (isRunning === false) {
      totalDuration = getMinutes(pomodoroMode) * 60;
      timeRemaining = totalDuration;

      resetTimerFn(false);
    } else {
      pauseTimerFn(true);
    }

    console.log("PREVIOUS", {
      pomodoroMode,
      timeRemaining,
      totalDuration,
      isRunning,
    });

    updateTimeDisplay(timeRemaining, totalDuration);

    const start = () => {
      return setInterval(() => {
        timeRemaining--;

        updateTimeDisplay(timeRemaining, totalDuration);

        if (timeRemaining <= 0) {
          clearInterval(interval);
        }

        updateTimer({ totalDuration, timeRemaining, isRunning });
      }, 1000);
    };

    btnTimer.addEventListener("click", (evt) => {
      evt.preventDefault();

      const isPressed = btnTimer.getAttribute("aria-pressed") === "true";

      switch (isPressed) {
        case true:
          if (timeRemaining > 0) {
            resumeTimerFn(true);
          } else {
            timeRemaining = totalDuration;
            resetTimerFn(true);
          }

          stopTimer();
          break;

        case false:
          if (timeRemaining <= 0) {
            resetTimerFn(true);
          } else {
            startTimerFn(true);
          }

          startTimer({
            totalDuration,
            timeRemaining,
          });

          break;
      }
    });
  })();
</script>

<style>
  .pomodoro-display,
  .pomodoro-btn-timer {
    font-family: var(--ff-pomodoro);
    letter-spacing: var(--ls-pomodoro);
  }

  .pomodoro-timer {
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: sans-serif;
  }

  .progress-dot {
    position: absolute;
    width: 12px;
    height: 12px;
    background: var(--clr-pomodoro);
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -100%) rotate(0deg)
      translateY(calc(var(--size) / 2 - var(--thickness) / 2));
    transform-origin: center;
    z-index: 2;
  }

  .pomodoro-progress-middle {
    border-radius: 50%;
    padding: 20px;
    background: linear-gradient(-45deg, rgb(42, 46, 81), rgb(23, 25, 48));
    filter: drop-shadow(3.125rem 3.125rem 6.25rem #151832);
  }

  .pomodoro-progress-outer::before {
    position: absolute;
    content: "";
    width: 100%;
    height: 100%;
    filter: drop-shadow(3.125rem 3.125rem 6.25rem #151832);
  }

  .pomodoro-progress-outer {
    position: relative;
    background: var(--gradient2);
    border-radius: 50%;
    padding: 10px;
    filter: drop-shadow(-3.125rem -3.125rem 6.25rem #272c5a);
  }

  .pomodoro-progress-inner {
    background: var(--clr-blue-900);
    border-radius: 50%;
    padding: 10px;
  }

  .pomodoro-progress {
    --size: 300px;
    --thickness: 10px;
    --progress: 0;

    width: var(--size);
    height: var(--size);
    border-radius: 50%;

    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    background: conic-gradient(
        var(--clr-pomodoro) calc(var(--progress) * 1%),
        transparent 0%
      ),
      var(--clr-blue-50-1);
    transition: background 0.3s ease-out;
  }

  .pomodoro-progress::before {
    content: "";
    position: absolute;
    width: calc(var(--size) - var(--thickness) * 2);
    height: calc(var(--size) - var(--thickness) * 2);
    background: var(--clr-blue-900);
    border-radius: 50%;
    z-index: 1;
  }

  .pomodoro-display--container {
    position: relative;
    z-index: 2;
    color: white;
  }

  @media screen and (min-width: 48em) {
    .pomodoro-progress {
      --size: 410px;
    }
  }
</style>
